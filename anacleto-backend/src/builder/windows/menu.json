{
	"id": "menu",
	"title": "Menu",
	"component": "GridContainer",
	"layout": "flex",
	"className": "flex-1 flex-column md:flex-row flex-nowrap",
	"items": [
		{
			"id": "menu_tree",
			"store": "menu/menu_tree",
			"component": "Tree",
			"title": "Menu tree",
			"className": "flex-1",
			"events": {
				"afterRender": {
					"body": "this.panelsContext.menu_tree.load();"
				},
				"onContextMenu": {
					"parameters": "event",
					"body": "const _this = this;const selectedNode = event.node;const nodes = _this.panelsContext.menu_tree.nodes[0].children;/*ignoro la root che è fake*/ /*** cancella il file o la directory passata* @param {*} scriptName * @param {*} isDir */ const deleteLeave =(isDir) => {utils.showConfirmDialog({message: isDir? 'Do you want to delete this folder?': 'Do you want to delete this leave?',header: 'Delete Confirmation',icon: 'pi pi-info-circle',acceptClassName: 'p-button-danger',accept: function () {_this.panelsContext.leave_grid_container.setIsToolbarLoading(true);/*converte i nodi dell'albero nel formato che si aspetta nei metadati*/ const treeToList =function (_node) {return _node.filter((_leave) => {return _leave !== selectedNode;}).map((_leave) => {let _item = {label: _leave.leave.label,icon: _leave.leave.icon,command: {body:_leave.command},};if (_leave.children) {_item.items = treeToList(_leave.children);}return _item;});};const body = { menu: treeToList(nodes) };utils.callServer({url: '/menu',method: 'patch',params: { application: _this.context.destApplication },data: body,}).then(function (response) {/* JSON.stringify(response.data)*/ if (response.data.success == true) {utils.showToast({severity: 'success',summary: 'Script updated',detail: JSON.stringify(response.data),life: 3000,});_this.panelsContext.leave_code.setRecord({});_this.panelsContext.leave_info.setRecord({});_this.panelsContext.menu_tree.load();} else {utils.showToast({severity: 'error',summary: 'Error',detail: JSON.stringify(response.data),sticky: true,});}_this.panelsContext.leave_grid_container.setIsToolbarLoading(false);}).catch(function (error) {utils.showToast({severity: 'error',summary: 'Error',detail: 'Servererror: ' + error || 'Error',sticky: true,});_this.panelsContext.leave_grid_container.setIsToolbarLoading(false);});},reject: function () {},});};const createLeave = (isDir) => {utils.showInputDialog({header: isDir ? 'New folder' : 'New leave',message: isDir? 'A folder cannot be empty, please specify the folder name': 'Please specify a leave name',defaultValue: '',validate: (_event, _context) => {return { success: true };},accept: (_event, _context) => {_this.panelsContext.leave_grid_container.setIsToolbarLoading(true);const scriptSource = `/**\\\\n * @author:${utils.userCredential.username}\\\\n * @date: ${new Date().toGMTString()}\\\\n */`;const newLeave = {label: _event.value,icon: `pi pi-fw ${isDir ? 'pi-folder' : 'pi-file'}`,command: {body: scriptSource },};newLeave.leave = {label: _event.value,icon: `pi pi-fw ${isDir ? 'pi-folder' : 'pi-file'}`,command: {body: scriptSource },};if (isDir) {newLeave.children = [];newLeave.leave.items = [];}selectedNode.children.push(newLeave);/*converte i nodi dell'albero nel formato che si aspetta nei metadati*/ const treeToList =function (_node) {return _node.map((_leave) => {let _item = {label: _leave.leave.label,icon: _leave.leave.icon,command: _leave.command,};if (_leave.children) {_item.items = treeToList(_leave.children);}return _item;});};const body = { menu: treeToList(nodes) };utils.callServer({url: '/menu',method: 'patch',params: { application: _this.context.destApplication },data: body,}).then(function (response) {/* JSON.stringify(response.data)*/ if (response.data.success == true) {utils.showToast({severity: 'success',summary: 'Script updated',detail: JSON.stringify(response.data),life: 3000,}); /*panelsContext.menu_tree.load();*/ /*_this.panelsContext.menu_tree.setNodes(_this.panelsContext.menu_tree.nodes);*/} else {utils.showToast({severity: 'error',summary: 'Error',detail: JSON.stringify(response.data),sticky: true,});}_this.panelsContext.leave_grid_container.setIsToolbarLoading(false);}).catch(function (error) {utils.showToast({severity: 'error',summary: 'Error',detail: 'Servererror: ' + error || 'Error',sticky: true,});_this.panelsContext.leave_grid_container.setIsToolbarLoading(false);});},});};let buttons = [];/*posso aggiungere cartella*/ /*posso aggiungere file*/ buttons.push({label: 'New folder',icon: 'pi pi-folder',command: () => {createLeave(true);},});buttons.push({label: 'New leave',icon: 'pi pi-file',command: () => {createLeave(false);},});if (event.node.isRoot || event.node.children) {/*posso cancellare cartella se non root*/ if (!event.node.isRoot) {buttons.push({label: 'Delete folder',icon: 'pi pi-trash',command: () => {deleteLeave(true);},});}} else {/*posso cancellare file*/ buttons.push({label: 'Delete leave',icon: 'pi pi-trash',command: (event) => {deleteLeave(false);},});}return buttons;"
				},
				"onSelect": {
					"parameters": "event",
					"body": "const _this = this;_this.panelsContext.leave_grid_container.setShowToolbar(false);_this.panelsContext.leave_grid_container.setTitle(event.node?.label || '');_this.panelsContext.label.setDisabled(true);_this.panelsContext.icon.setDisabled(true);_this.panelsContext.source.setDisabled(true);if (!event.node.command) {event.node.command = '';}/*if (event.node.children && event.node.children.length > 0) {//è un nodo_this.panelsContext.leave_code.setRecord({})_this.panelsContext.leave_info.setRecord({})return}*/const record = {'id': event.node.id, 'source': event.node.command.body?.trim(),'label': event.node.label,'icon': event.node.icon};_this.panelsContext.leave_info.setRecord(record);_this.panelsContext.leave_code.setRecord(record);_this.panelsContext.label.setDisabled(false);_this.panelsContext.icon.setDisabled(false);_this.panelsContext.source.setDisabled(false);_this.panelsContext.leave_grid_container.setShowToolbar(true);"
				}
			}
		},
		{
			"id": "leave_grid_container",
			"component": "GridContainer",
			"layout": "flex",
			"isCard": true,
			"className": "flex-grow-2 flex-shrink-2 flex-column stretch",
			"actions": [{
				"id": "save",
				"label": "Save",
				"icon": "pi pi-save",
				"events": {
					"onClick": {
						"body": "const _this = this;_this.panelsContext.leave_grid_container.setIsToolbarLoading(true);const record = {'id': _this.panelsContext.leave_info.getRecord().id,'label': _this.panelsContext.leave_info.getRecord().label,'icon': _this.panelsContext.leave_info.getRecord().icon,'source': _this.panelsContext.leave_code.getRecord().source};/*ignoro la root che è fake*/const nodes = _this.panelsContext.menu_tree.nodes[0].children;/*converte i nodi dell'albero nel formato che si aspetta nei metadati*/const treeToList = function (_node) {return _node.map(_leave => {if(_leave.id === record.id){_leave = { ..._leave, ...record}; /*delete source key as the name in the metadata.json is command*/delete _leave.source;}if (_leave.children) {_leave.items = treeToList(_leave.children); delete _leave.children};return _leave;})};const body = {'menu': treeToList(nodes)};utils.callServer({'url': '/menu','method': 'patch','params': {'application': _this.context.destApplication,},'data': body}).then(function (response) { /*JSON.stringify(response.data)*/if (response.data.success == true) {utils.showToast({'severity': 'success','summary': 'Script updated','detail': JSON.stringify(response.data),'life': 3000 });_this.panelsContext.menu_tree.load();_this.panelsContext.menu_tree.setNodes(_this.panelsContext.menu_tree.nodes);} else {utils.showToast({'severity': 'error','summary': 'Error','detail': JSON.stringify(response.data),'sticky': true });};_this.panelsContext.leave_grid_container.setIsToolbarLoading(false);}).catch(function (error) {utils.showToast({'severity': 'error','summary': 'Error','detail': 'Server error: ' + error || 'Error','sticky': true });_this.panelsContext.leave_grid_container.setIsToolbarLoading(false);});"
				}
			}
			}],
			"items": [
				{
					"id": "leave_info",
					"component": "Form",
					"layout": "flex",
					"className": "gap-3",
					"items": [
						{
							"component": "TextInput",
							"containerClassName": "ml-6",
							"id": "label",
							"disabled": true,
							"label": "Label"
						},
						{
							"component": "TextInput",
							"id": "icon",
							"disabled": true,
							"label": "Icon name"
						}
					]
				},
				{
					"id": "leave_code",
					"component": "Form",
					"layout": "flex",
					"containerClassName": "flex flex-auto",
					"className": "flex flex-auto leave_code gap-3",
					"items": [
						{
							"component": "CodeEditor",
							"className": "flex flex-auto",
							"id": "source",
							"theme": "light",
							"language": "javascript",
							"disabled": true
						}
					],
					"events": {
						"afterRender": {
							"body": "this.panelsContext.leave_code.items.source.disabled = true;"
						}
					}
				}
			],
			"events": {
				"afterRender": {
					"body": "this.panelsContext.leave_grid_container.setShowToolbar(false);"
				}
			}
		}
	]
}
